## todos: 
    - change to en
    - responsivity
    - create footer
    - create contact me page
    - remove lorem ipsum

To create a project: 
    npx create-next-app@latest

Adding styled-components:
    npm install styled-components

To set up a font:
    // create a const with the font
    const saira = Saira({
        weights: [...],
        subsets: [...],
    })  <-- this will import from google fonts

    // set the classname where the font will be used
    className={saira.className}

To use local storage:
    // create a function that receives a key and a inital value
    export function useLocalStorage(key: string, initialValue: T){}

    // create a react hook
    const [currValue, setValue] = useState(initalValue) // import from react

    // use useEffect to make sure DOM is rendered before using local storage

    // create an arrow function to update local storage value
    const updateLocalStorage = (newValue: string) => {
        setValue(newValue);
        localStorage.setItem(key, JSON.stringfy(newValue))
    }

    // return the currValue and the set function
    return {
        currValue,
        updateLocalStorage
    }

To set default providers:
    // create a DefaultProviders component
    // use the component on the page layout

To give components properties:
    // declare an interface (or pass it directly in the declaration)
    // type the component with the interface
    const element = styled.element<myInterface>`...`

    To use props:
    ${props => props.property ? '' : ''}

    // Remember to set the property on the tag
    <Tag property={false}></Tag>

To create a filter context:
    // use react CreateContext
    // dictionaries, keys=contexts, values=initialValue
    // Must include setters
    
    // create a context provider
    // it's a function that receives a children of type ReactNode
    // uses react useState for each context variable
    // and returns CreateContext.provider tag, passing a
    // dictionary with the getters and setters through the "value"
    // that contains "children"

    // create a hook to use context
    // it's a function that returns useContext(context) (from react)

    // add the ContextProvider tag on the layout

To enum:
    export enum [name] { 'thing', 'another thing'}

To use GraphIQL:
    cd to directory
    npm install //to install depedencies
    npm start

process.env.var must include http://

To create GraphIQL hook:
    npm intsall axios @tanstack/react-query //to install cashing libraries

    // create FetchResponse type
    // create Product type: must follow GraphIQL object model 


    // All GraphIQL requests are done using axios.post requests
    fetcher = axios.post<fetchType>(URL, {query: queryString})
    
    use react hook useQuery to cache results
    useQuery({
        queryFn:() => fetcher,
        queryKey: [...]
    })

    Product-list.tsx uses a hook to get the db data and a map to generate each product card
    useProduct (the hook) uses a hook, useQuery({QueryFn, QueryKey}) to fetch the data
    QueryFn is an axios request (axios.post) to GraphIQL, must be typed AxiosPromise<FetchResponse>

    useProduct calls useQuery which calls axios.post, which returns the data

To filter gallery based on input value:
    // Set an onChange={(event => setSearch(event.target.value))}
    // At useProducts, use search=useDeferredValue(search)
    // then filter the products array to get the items that includes the text
    
To navigate between pages:
    use router.push(/product?id=id)

To select quantity:
    // On the page: 
        function that deletes the item from the local storage: changeQuantity
            Given the use of useState to manage the cart, React automatically re-renders all related components
            on the page that uses it when it changes;
        send the function via props: whole function, not a call for it;
    // On the component:
        function that calls the changeQuantity function: 
            triggered onChange of the "Select" element, receives an event on its call. The event is of ChangeEvent,
            and it is typed as the changes html tag


        
        